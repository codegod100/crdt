import { readFile, writeFile } from 'node:fs/promises';
import { resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import { SECURITY_HEADER_ENTRIES } from '../src/lib/security-headers.js';

const projectRoot = fileURLToPath(new URL('..', import.meta.url));
const headersPath = resolve(projectRoot, '.svelte-kit/cloudflare/_headers');

const HEADER_BLOCK_START = '# === START AUTOGENERATED SVELTE IMMUTABLE HEADERS ===';
const HEADER_BLOCK_END = '# === END AUTOGENERATED SVELTE IMMUTABLE HEADERS ===';

async function loadHeadersFile() {
	try {
		return await readFile(headersPath, 'utf8');
	} catch (error) {
		if (error && typeof error === 'object' && 'code' in error && error.code === 'ENOENT') {
			throw new Error(
				`Missing Cloudflare _headers file at ${headersPath}. Run "npm run build" before updating headers.`
			);
		}

		throw error;
	}
}

function extractAppDir(contents) {
	const match = contents.match(/^\/([^/\s]+)\/\*/m);
	return match?.[1] ?? '_app';
}

function createSecurityLines() {
	return SECURITY_HEADER_ENTRIES.map(([header, value]) => `  ${header}: ${value}`);
}

function buildHeadersFile(appDir, securityLines) {
	return [
		HEADER_BLOCK_START,
		`/${appDir}/*`,
		'  X-Robots-Tag: noindex',
		'  Cache-Control: no-cache',
		...securityLines,
		`/${appDir}/immutable/*`,
		'  ! Cache-Control',
		'  Cache-Control: public, immutable, max-age=31536000',
		HEADER_BLOCK_END
	]
		.filter(Boolean)
		.join('\n');
}

async function main() {
	const current = await loadHeadersFile();
	const appDir = extractAppDir(current);
	const securityLines = createSecurityLines();
	const nextContents = buildHeadersFile(appDir, securityLines);

	if (current.trimEnd() === nextContents) {
		return;
	}

	await writeFile(headersPath, `${nextContents}\n`, 'utf8');
}

await main();
